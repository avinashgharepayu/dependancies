'use strict';

var libphonenumber = require('libphonenumber');

module.exports = function(mongoose) {
    var SchemaType = mongoose.SchemaType,
        Schema = mongoose.Schema,
        errorMessages = mongoose.Error.messages;

    errorMessages.String.minwordcount = 'Path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed numbers of words ({MINLENGTH}).';
    errorMessages.String.maxwordcount = 'Path `{PATH}` (`{VALUE}`) is longer than the maximum allowed numbers of words ({MAXLENGTH}).';
    errorMessages.String.validphone = 'Path `{PATH}` (`{VALUE}`) is not valid phone number.';

    function SchemaString (key, options) {
        SchemaType.call(this, key, options, 'String');
    }
    SchemaString.schemaName = 'String';
    SchemaString.prototype = Object.create( Schema.Types.String.prototype );
    SchemaString.prototype.constructor = SchemaString;

    SchemaString.prototype.capitalize = function () {
        return this.set(function (v, self) {
            if ('string' !== typeof v) v = self.cast(v);
            if (v) return v.charAt(0).toUpperCase() + v.slice(1).toLowerCase();
            return v;
        });
    };

    SchemaString.prototype.capitalizeAll = function () {
        return this.set(function (v, self) {
            if ('string' !== typeof v) v = self.cast(v);
            if (v) return v.split(' ').map(function(word) { return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase(); }).join(' ');
            return v;
        });
    };

    SchemaString.prototype.nomultispaces = function () {
        return this.set(function (v, self) {
            if ('string' !== typeof v) v = self.cast(v);
            if (v) return v.replace(/ +(?= )/g,'');
            return v;
        });
    };

    SchemaString.prototype.minwordcount = function (value, message) {
        if (this.minwordcountValidator) {
            this.validators = this.validators.filter(function (v) {
                return v.validator != this.minwordcountValidator;
            }, this);
        }

        if (null != value) {
            var msg = message || errorMessages.String.minwordcount;
            msg = msg.replace(/{MINLENGTH}/, value);
            this.validators.push({
                validator: this.minwordcountValidator = function (v) {
                    return v === null || v.split(' ').length >= value;
                },
                message: msg,
                type: 'minwordcount'
            });
        }

        return this;
    };

    SchemaString.prototype.maxwordcount = function (value, message) {
        if (this.maxwordcountValidator) {
            this.validators = this.validators.filter(function(v){
                return v.validator != this.maxwordcountValidator;
            }, this);
        }

        if (null != value) {
            var msg = message || errorMessages.String.maxwordcount;
            msg = msg.replace(/{MAXLENGTH}/, value);
            this.validators.push({
                validator: this.maxwordcountValidator = function(v) {
                    return v === null || v.split(' ').length <= value;
                },
                message: msg,
                type: 'maxwordcount'
            });
        }

        return this;
    };

    SchemaString.prototype.validphone = function(value, message) {
        if (this.validphoneValidator) {
            this.validators = this.validators.filter(function (v) {
                return v.validator != this.validphoneValidator;
            }, this);
        }

        if (null != value) {
            var msg = message || errorMessages.String.validphone;
            this.validators.push({
                validator: this.validphoneValidator = function (v) {
                    if(v === null) return true;
                    try {
                        return libphonenumber.validate(v, 'string' !== typeof value ? null : value);
                    } catch(e) {
                        return false;
                    }
                },
                message: msg,
                type: 'validphone'
            });
        }

        return this;
    };

    Schema.Types.String = SchemaString;
    mongoose.Types.String = mongoose.mongo.String;
};
